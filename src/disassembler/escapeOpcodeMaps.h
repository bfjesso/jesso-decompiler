#pragma once
#include "opcodes.h"

// Intel 64 and IA-32 Architectures Software Developer’s Manuals:
//	intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html

// Appendix A: A.5.2 table A-7
// opcode: 0xD8
const struct Opcode escapeD8OpcodeMapBits[8] = // [ModR/M bits 3-5]
{
	{ FADD, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FMUL, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FCOM, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FCOMP, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FSUB, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FSUBR, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FDIV, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FDIVR, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
};

// Appendix A: A.5.2 table A-8
// opcode: 0xD8
const struct Opcode escapeD8OpcodeMapByte[0x40] = // [ModR/M byte - 0xC0]
{
	{ FADD, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC0
	{ FADD, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC1
	{ FADD, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC2
	{ FADD, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC3
	{ FADD, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC4
	{ FADD, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC5
	{ FADD, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC6
	{ FADD, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC7
	{ FMUL, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC8
	{ FMUL, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC9
	{ FMUL, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCA
	{ FMUL, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCB
	{ FMUL, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCC
	{ FMUL, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCD
	{ FMUL, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCE
	{ FMUL, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCF
	{ FCOM, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD0
	{ FCOM, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD1
	{ FCOM, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD2
	{ FCOM, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD3
	{ FCOM, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD4
	{ FCOM, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD5
	{ FCOM, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD6
	{ FCOM, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD7
	{ FCOMP, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD8
	{ FCOMP, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xD9
	{ FCOMP, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xDA
	{ FCOMP, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xDB
	{ FCOMP, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xDC
	{ FCOMP, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xDD
	{ FCOMP, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xDE
	{ FCOMP, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xDF
	{ FSUB, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE0
	{ FSUB, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE1
	{ FSUB, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE2
	{ FSUB, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE3
	{ FSUB, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE4
	{ FSUB, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE5
	{ FSUB, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE6
	{ FSUB, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE7
	{ FSUBR, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE8
	{ FSUBR, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE9
	{ FSUBR, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEA
	{ FSUBR, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEB
	{ FSUBR, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEC
	{ FSUBR, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xED
	{ FSUBR, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEE
	{ FSUBR, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEF
	{ FDIV, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF0
	{ FDIV, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF1
	{ FDIV, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF2
	{ FDIV, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF3
	{ FDIV, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF4
	{ FDIV, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF5
	{ FDIV, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF6
	{ FDIV, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF7
	{ FDIVR, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF8
	{ FDIVR, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF9
	{ FDIVR, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFA
	{ FDIVR, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFB
	{ FDIVR, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFC
	{ FDIVR, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFD
	{ FDIVR, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFE
	{ FDIVR, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }							// 0xFF
};

// Appendix A: A.5.2 table A-9
// opcode: 0xD9
const struct Opcode escapeD9OpcodeMapBits[8] = // [ModR/M bits 3-5]
{
	{ FLD, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// not an opcode: reserved
	{ FST, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FSTP, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FLDENV, -1, M, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FLDCW, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FSTENV, -1, M, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FSTCW, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
};

// Appendix A: A.5.2 table A-10
// opcode: 0xD9
const struct Opcode escapeD9OpcodeMapByte[0x40] = // [ModR/M byte - 0xC0]
{
	{ FLD, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC0
	{ FLD, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC1
	{ FLD, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC2
	{ FLD, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC3
	{ FLD, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC4
	{ FLD, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC5
	{ FLD, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC6
	{ FLD, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC7
	{ FXCH, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC8
	{ FXCH, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC9
	{ FXCH, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCA
	{ FXCH, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCB
	{ FXCH, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCC
	{ FXCH, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCD
	{ FXCH, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCE
	{ FXCH, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCF
	{ FNOP, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xD0
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD1; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD2; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD3; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD4; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD5; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD6; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD7; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD8; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD9; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDA; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDB; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDC; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDD; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDE; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDF; not an opcode: reserved
	{ FCHS, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xE0
	{ FABS, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xE1
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE2; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE3; not an opcode: reserved
	{ FTST, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xE4
	{ FXAM, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xE5
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE6; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE7; not an opcode: reserved
	{ FLD1, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xE8
	{ FLDL2T, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xE9
	{ FLDL2E, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xEA
	{ FLDPI, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xEB
	{ FLDLG2, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xEC
	{ FLDLN2, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xED
	{ FLDZ, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xEE
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xEF; not an opcode: reserved
	{ F2XM1, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF0
	{ FYL2X, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF1
	{ FPTAN, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF2
	{ FPATAN, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF3
	{ FXTRACT, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF4
	{ FPREM1, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF5
	{ FDECSTP, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF6
	{ FINCSTP, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF7
	{ FPREM, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF8
	{ FYL2XP1, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xF9
	{ FSQRT, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xFA
	{ FSINCOS, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xFB
	{ FRNDINT, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xFC
	{ FSCALE, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xFD
	{ FSIN, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xFE
	{ FCOS, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }				// 0xFF
};

// Appendix A: A.5.2 table A-11
// opcode: 0xDA
const struct Opcode escapeDAOpcodeMapBits[8] = // [ModR/M bits 3-5]
{
	{ FIADD, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FIMUL, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FICOM, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FICOMP, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FISUB, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FISUBR, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FIDIV, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FIDIVR, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
};

// Appendix A: A.5.2 table A-12
// opcode: 0xDA
const struct Opcode escapeDAOpcodeMapByte[0x40] = // [ModR/M byte - 0xC0]
{
	{ FCMOVB, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC0
	{ FCMOVB, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC1
	{ FCMOVB, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC2
	{ FCMOVB, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC3
	{ FCMOVB, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC4
	{ FCMOVB, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC5
	{ FCMOVB, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC6
	{ FCMOVB, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC7
	{ FCMOVE, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC8
	{ FCMOVE, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC9
	{ FCMOVE, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xCA
	{ FCMOVE, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xCB
	{ FCMOVE, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xCC
	{ FCMOVE, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xCD
	{ FCMOVE, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xCE
	{ FCMOVE, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xCF
	{ FCMOVBE, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD0
	{ FCMOVBE, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD1
	{ FCMOVBE, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD2
	{ FCMOVBE, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD3
	{ FCMOVBE, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD4
	{ FCMOVBE, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD5
	{ FCMOVBE, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD6
	{ FCMOVBE, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD7
	{ FCMOVU, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD8
	{ FCMOVU, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD9
	{ FCMOVU, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xDA
	{ FCMOVU, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xDB
	{ FCMOVU, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xDC
	{ FCMOVU, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xDD
	{ FCMOVU, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xDE
	{ FCMOVU, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xDF
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE0; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE1; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE2; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE3; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE4; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE5; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE6; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE7; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE8; not an opcode: reserved
	{ FUCOMPP, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xE9
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xEA; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xEB; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xEC; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xED; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xEE; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xEF; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF0; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF1; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF2; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF3; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF4; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF5; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF6; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF7; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF8; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF9; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFA; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFB; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFC; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFD; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFE; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }		// 0xFF; not an opcode: reserved
};

// Appendix A: A.5.2 table A-13
// opcode: 0xDB
const struct Opcode escapeDBOpcodeMapBits[8] = // [ModR/M bits 3-5]
{
	{ FILD, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FISTTP, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FIST, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FISTP, -1, Md, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// not an opcode: reserved
	{ FLD, -1, Mt, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// not an opcode: reserved
	{ FSTP, -1, Mt, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
};

// Appendix A: A.5.2 table A-14
// opcode: 0xDB
const struct Opcode escapeDBOpcodeMapByte[0x40] = // [ModR/M byte - 0xC0]
{
	{ FCMOVNB, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC0
	{ FCMOVNB, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC1
	{ FCMOVNB, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC2
	{ FCMOVNB, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC3
	{ FCMOVNB, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC4
	{ FCMOVNB, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC5
	{ FCMOVNB, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC6
	{ FCMOVNB, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC7
	{ FCMOVNE, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC8
	{ FCMOVNE, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xC9
	{ FCMOVNE, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xCA
	{ FCMOVNE, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xCB
	{ FCMOVNE, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xCC
	{ FCMOVNE, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xCD
	{ FCMOVNE, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xCE
	{ FCMOVNE, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xCF
	{ FCMOVNBE, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD0
	{ FCMOVNBE, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD1
	{ FCMOVNBE, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD2
	{ FCMOVNBE, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD3
	{ FCMOVNBE, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD4
	{ FCMOVNBE, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD5
	{ FCMOVNBE, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD6
	{ FCMOVNBE, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD7
	{ FCMOVNU, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD8
	{ FCMOVNU, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xD9
	{ FCMOVNU, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xDA
	{ FCMOVNU, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xDB
	{ FCMOVNU, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xDC
	{ FCMOVNU, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xDD
	{ FCMOVNU, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xDE
	{ FCMOVNU, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xDF
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE0; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE1; not an opcode: reserved
	{ FCLEX, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xE2; not an opcode: reserved
	{ FINIT, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xE3; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE4; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE5; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE6; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE7; not an opcode: reserved
	{ FUCOMI, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xE8
	{ FUCOMI, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xE9
	{ FUCOMI, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xEA
	{ FUCOMI, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xEB
	{ FUCOMI, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xEC
	{ FUCOMI, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xED
	{ FUCOMI, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xEE
	{ FUCOMI, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xEF
	{ FCOMI, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF0
	{ FCOMI, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF1
	{ FCOMI, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF2
	{ FCOMI, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF3
	{ FCOMI, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF4
	{ FCOMI, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF5
	{ FCOMI, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF6
	{ FCOMI, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF7
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF8; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF9; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFA; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFB; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFC; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFD; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFE; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }		// 0xFF; not an opcode: reserved
};

// Appendix A: A.5.2 table A-15
// opcode: 0xDC
const struct Opcode escapeDCOpcodeMapBits[8] = // [ModR/M bits 3-5]
{
	{ FADD, -1, Mq, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FMUL, -1, Mq, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FCOM, -1, Mq, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FCOMP, -1, Mq, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FSUB, -1, Mq, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FSUBR, -1, Mq, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FDIV, -1, Mq, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FDIVR, -1, Mq, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
};

// Appendix A: A.5.2 table A-16
// opcode: 0xDC
const struct Opcode escapeDCOpcodeMapByte[0x40] = // [ModR/M byte - 0xC0]
{
	{ FADD, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC0
	{ FADD, -1, ST1_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC1
	{ FADD, -1, ST2_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC2
	{ FADD, -1, ST3_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC3
	{ FADD, -1, ST4_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC4
	{ FADD, -1, ST5_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC5
	{ FADD, -1, ST6_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC6
	{ FADD, -1, ST7_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC7
	{ FMUL, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC8
	{ FMUL, -1, ST1_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC9
	{ FMUL, -1, ST2_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCA
	{ FMUL, -1, ST3_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCB
	{ FMUL, -1, ST4_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCC
	{ FMUL, -1, ST5_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCD
	{ FMUL, -1, ST6_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCE
	{ FMUL, -1, ST7_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCF
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD0; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD1; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD2; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD3; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD4; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD5; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD6; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD7; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD8; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD9; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDA; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDB; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDC; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDD; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDE; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDF; not an opcode: reserved
	{ FSUBR, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE0
	{ FSUBR, -1, ST1_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE1
	{ FSUBR, -1, ST2_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE2
	{ FSUBR, -1, ST3_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE3
	{ FSUBR, -1, ST4_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE4
	{ FSUBR, -1, ST5_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE5
	{ FSUBR, -1, ST6_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE6
	{ FSUBR, -1, ST7_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE7
	{ FSUB, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE8
	{ FSUB, -1, ST1_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE9
	{ FSUB, -1, ST2_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEA
	{ FSUB, -1, ST3_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEB
	{ FSUB, -1, ST4_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEC
	{ FSUB, -1, ST5_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xED
	{ FSUB, -1, ST6_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEE
	{ FSUB, -1, ST7_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEF
	{ FDIVR, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF0
	{ FDIVR, -1, ST1_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF1
	{ FDIVR, -1, ST2_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF2
	{ FDIVR, -1, ST3_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF3
	{ FDIVR, -1, ST4_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF4
	{ FDIVR, -1, ST5_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF5
	{ FDIVR, -1, ST6_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF6
	{ FDIVR, -1, ST7_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF7
	{ FDIV, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF8
	{ FDIV, -1, ST1_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF9
	{ FDIV, -1, ST2_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFA
	{ FDIV, -1, ST3_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFB
	{ FDIV, -1, ST4_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFC
	{ FDIV, -1, ST5_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFD
	{ FDIV, -1, ST6_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFE
	{ FDIV, -1, ST7_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }							// 0xFF
};

// Appendix A: A.5.2 table A-17
// opcode: 0xDD
const struct Opcode escapeDDOpcodeMapBits[8] = // [ModR/M bits 3-5]
{
	{ FLD, -1, Mq, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FISTTP, -1, Mq, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FST, -1, Mq, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FSTP, -1, Mq, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FRSTOR, -1, M, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FSAVE, -1, M, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FSTSW, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
};

// Appendix A: A.5.2 table A-18
// opcode: 0xDD
const struct Opcode escapeDDOpcodeMapByte[0x40] = // [ModR/M byte - 0xC0]
{
	{ FFREE, -1, ST0_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xC0
	{ FFREE, -1, ST1_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xC1
	{ FFREE, -1, ST2_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xC2
	{ FFREE, -1, ST3_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xC3
	{ FFREE, -1, ST4_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xC4
	{ FFREE, -1, ST5_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xC5
	{ FFREE, -1, ST6_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xC6
	{ FFREE, -1, ST7_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xC7
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xC8; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xC9; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xCA; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xCB; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xCC; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xCD; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xCE; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xCF; not an opcode: reserved
	{ FST, -1, ST0_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xD0
	{ FST, -1, ST1_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xD1
	{ FST, -1, ST2_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xD2
	{ FST, -1, ST3_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xD3
	{ FST, -1, ST4_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xD4
	{ FST, -1, ST5_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xD5
	{ FST, -1, ST6_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xD6
	{ FST, -1, ST7_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xD7
	{ FSTP, -1, ST0_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xD8
	{ FSTP, -1, ST1_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xD9
	{ FSTP, -1, ST2_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xDA
	{ FSTP, -1, ST3_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xDB
	{ FSTP, -1, ST4_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xDC
	{ FSTP, -1, ST5_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xDD
	{ FSTP, -1, ST6_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xDE
	{ FSTP, -1, ST7_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xDF
	{ FUCOM, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE0
	{ FUCOM, -1, ST1_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE1
	{ FUCOM, -1, ST2_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE2
	{ FUCOM, -1, ST3_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE3
	{ FUCOM, -1, ST4_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE4
	{ FUCOM, -1, ST5_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE5
	{ FUCOM, -1, ST6_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE6
	{ FUCOM, -1, ST7_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE7
	{ FUCOMP, -1, ST0_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xE8
	{ FUCOMP, -1, ST1_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xE9
	{ FUCOMP, -1, ST2_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xEA
	{ FUCOMP, -1, ST3_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xEB
	{ FUCOMP, -1, ST4_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xEC
	{ FUCOMP, -1, ST5_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xED
	{ FUCOMP, -1, ST6_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xEE
	{ FUCOMP, -1, ST7_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xEF
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF0; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF1; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF2; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF3; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF4; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF5; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF6; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF7; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF8; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF9; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFA; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFB; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFC; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFD; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFE; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }		// 0xFF; not an opcode: reserved
};

// Appendix A: A.5.2 table A-19
// opcode: 0xDE
const struct Opcode escapeDEOpcodeMapBits[8] = // [ModR/M bits 3-5]
{
	{ FIADD, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FIMUL, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FICOM, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FICOMP, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FISUB, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FISUBR, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FIDIV -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FIDIVR, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
};

// Appendix A: A.5.2 table A-20
// opcode: 0xDE
const struct Opcode escapeDEOpcodeMapByte[0x40] = // [ModR/M byte - 0xC0]
{
	{ FADDP, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC0
	{ FADDP, -1, ST1_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC1
	{ FADDP, -1, ST2_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC2
	{ FADDP, -1, ST3_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC3
	{ FADDP, -1, ST4_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC4
	{ FADDP, -1, ST5_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC5
	{ FADDP, -1, ST6_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC6
	{ FADDP, -1, ST7_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC7
	{ FMULP, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC8
	{ FMULP, -1, ST1_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xC9
	{ FMULP, -1, ST2_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCA
	{ FMULP, -1, ST3_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCB
	{ FMULP, -1, ST4_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCC
	{ FMULP, -1, ST5_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCD
	{ FMULP, -1, ST6_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCE
	{ FMULP, -1, ST7_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xCF
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD0; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD1; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD2; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD3; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD4; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD5; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD6; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD7; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD8; not an opcode: reserved
	{ FCOMPP, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },			// 0xD9; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDA; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDB; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDC; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDD; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDE; not an opcode: reserved
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDF; not an opcode: reserved
	{ FSUBRP, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xE0
	{ FSUBRP, -1, ST1_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xE1
	{ FSUBRP, -1, ST2_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xE2
	{ FSUBRP, -1, ST3_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xE3
	{ FSUBRP, -1, ST4_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xE4
	{ FSUBRP, -1, ST5_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xE5
	{ FSUBRP, -1, ST6_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xE6
	{ FSUBRP, -1, ST7_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xE7
	{ FSUBP, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE8
	{ FSUBP, -1, ST1_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xE9
	{ FSUBP, -1, ST2_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEA
	{ FSUBP, -1, ST3_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEB
	{ FSUBP, -1, ST4_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEC
	{ FSUBP, -1, ST5_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xED
	{ FSUBP, -1, ST6_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEE
	{ FSUBP, -1, ST7_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xEF
	{ FDIVRP, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xF0
	{ FDIVRP, -1, ST1_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xF1
	{ FDIVRP, -1, ST2_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xF2
	{ FDIVRP, -1, ST3_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xF3
	{ FDIVRP, -1, ST4_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xF4
	{ FDIVRP, -1, ST5_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xF5
	{ FDIVRP, -1, ST6_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xF6
	{ FDIVRP, -1, ST7_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xF7
	{ FDIVP, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF8
	{ FDIVP, -1, ST1_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xF9
	{ FDIVP, -1, ST2_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFA
	{ FDIVP, -1, ST3_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFB
	{ FDIVP, -1, ST4_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFC
	{ FDIVP, -1, ST5_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFD
	{ FDIVP, -1, ST6_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFE
	{ FDIVP, -1, ST7_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },							// 0xFF
};

// Appendix A: A.5.2 table A-21
// opcode: 0xDF
const struct Opcode escapeDFOpcodeMapBits[8] = // [ModR/M bits 3-5]
{
	{ FILD, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FISTTP, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FIST, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FISTP, -1, Mw, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FBLD, -1, Mt, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FILD, -1, Mq, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FBSTP, -1, Mt, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ FISTP, -1, Mq, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
};

// Appendix A: A.5.2 table A-22
// opcode: 0xDF
const struct Opcode escapeDFOpcodeMapByte[0x40] = // [ModR/M byte - 0xC0]
{
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xC0
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xC1
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xC2
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xC3
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xC4
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xC5
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xC6
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xC7
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xC8
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xC9
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xCA
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xCB
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xCC
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xCD
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xCE
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xCF
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD0
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD1
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD2
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD3
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD4
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD5
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD6
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD7
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD8
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xD9
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDA
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDB
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDC
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDD
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDE
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xDF
	{ FSTSW, -1, AX_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },					// 0xE0
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE1
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE2
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE3
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE4
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE5
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE6
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xE7
	{ FUCOMIP, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT},						// 0xE8
	{ FUCOMIP, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xE9
	{ FUCOMIP, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xEA
	{ FUCOMIP, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xEB
	{ FUCOMIP, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xEC
	{ FUCOMIP, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xED
	{ FUCOMIP, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xEE
	{ FUCOMIP, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xEF
	{ FCOMIP, -1, ST0_CODE, ST0_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT},							// 0xF0
	{ FCOMIP, -1, ST0_CODE, ST1_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xF1
	{ FCOMIP, -1, ST0_CODE, ST2_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xF2
	{ FCOMIP, -1, ST0_CODE, ST3_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xF3
	{ FCOMIP, -1, ST0_CODE, ST4_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xF4
	{ FCOMIP, -1, ST0_CODE, ST5_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xF5
	{ FCOMIP, -1, ST0_CODE, ST6_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xF6
	{ FCOMIP, -1, ST0_CODE, ST7_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },						// 0xF7
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF8
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xF9
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFA
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFB
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFC
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFD
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },		// 0xFE
	{ NO_MNEMONIC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }		// 0xFF
};