#pragma once
#include "opcodes.h"

// Intel 64 and IA-32 Architectures Software Developer’s Manuals:
//	intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html

// This file isn't complete yet

// Appendix A: A.4.2 table A-6

// any NO_OPERAND_CODE means that the operand code will be what is in the regular opcode map

// this is only up to group 6. These groups only depend on ModR/M bits 3-5
const struct Opcode extendedOpcodeMapThroughGroupSix[7][8] = // [group index][ModR/M bits 3-5]
{
	{	// group 1
		{ ADD, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ OR, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ ADC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ SBB, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ AND, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ SUB, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ XOR, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ CMP, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
	},
	{	// group 1A
		{ POP, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC }
	},
	{	// group 2
		{ ROL, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ ROR, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ RCL, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ RCR, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ SHL, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ SHR, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ NO_MNEMONIC },
		{ SAR, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
	},
	{	// group 3
		{ TEST, -1, NO_OPERAND_CODE, Ib, NO_OPERAND_CODE, NO_SUPERSCRIPT }, // second operands is Iz if opcode is 0xF7
		{ NO_MNEMONIC },
		{ NOT, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ NEG, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ MUL, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ IMUL, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT},
		{ DIV, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ IDIV, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
	},
	{	// group 4
		{ INC, -1, Eb, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ DEC, -1, Eb, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC }
	},
	{	// group 5
		{ INC, -1, Ev, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ DEC, -1, Ev, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ CALL_NEAR, -1, Ev, NO_OPERAND_CODE, NO_OPERAND_CODE, f64 },
		{ CALL_FAR, -1, Ep, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ JMP_NEAR, -1, Ev, NO_OPERAND_CODE, NO_OPERAND_CODE, f64 },
		{ JMP_FAR, -1, Mp, NO_OPERAND_CODE, NO_OPERAND_CODE, d64 },
		{ PUSH, -1, Ev, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ NO_MNEMONIC }
	},
	{	// group 6     ! This is not implemented yet
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC }
	}
};

// Group 7 where Mod 7,6 is 11B
const struct Opcode extendedOpcodeMapGroup7With11B[8][8] =  // [ModR/M bits 3-5][ModR/M bits 0-2]
{
	{
		{ NO_MNEMONIC },
		{ VMCALL, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ VMLAUNCH, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ VMRESUME, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ VMXOFF, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC }
	},
	{
		{ MONITOR, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ MWAIT, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ CLAC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ STAC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ ENCLS, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
	},
	{
		{ XGETBV, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ XSETBV, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ NO_MNEMONIC },
		{ NO_MNEMONIC },
		{ VMFUNC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ XEND, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ XTEST, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
		{ ENCLU, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
	},
	// not completed
};

const struct Opcode extendedOpcodeMapGroup8[8] = // [ModR/M bits 3-5]
{
	{ NO_MNEMONIC },
	{ NO_MNEMONIC },
	{ NO_MNEMONIC },
	{ NO_MNEMONIC },
	{ BT, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ BTS, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ BTR, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ BTC, -1, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
};

// for opcode 0xC6
const struct Opcode extendedOpcodeMapGroup11C6[8] = // [ModR/M bits 3-5]
{
	{ MOV, -1, Eb, Ib, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ NO_MNEMONIC },
	{ NO_MNEMONIC },
	{ NO_MNEMONIC },
	{ NO_MNEMONIC },
	{ NO_MNEMONIC },
	{ NO_MNEMONIC },
	{ XABORT, -1, Ib, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
};

// for opcode 0xC7
const struct Opcode extendedOpcodeMapGroup11C7[8] = // [ModR/M bits 3-5]
{
	{ MOV, -1, Ev, Iz, NO_OPERAND_CODE, NO_SUPERSCRIPT },
	{ NO_MNEMONIC },
	{ NO_MNEMONIC },
	{ NO_MNEMONIC },
	{ NO_MNEMONIC },
	{ NO_MNEMONIC },
	{ NO_MNEMONIC },
	{ XBEGIN, -1, Jz, NO_OPERAND_CODE, NO_OPERAND_CODE, NO_SUPERSCRIPT }
};